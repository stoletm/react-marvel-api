{"version":3,"file":"static/js/666.14bc3323.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useState, useEffect } from 'react';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport useMarvelService from '../../services/MarvelService';\r\n\r\nimport './randomChar.scss';\r\nimport mjolnir from '../../resources/img/mjolnir.png';\r\n\r\nconst RandomChar = () => {\r\n\r\n    const [char, setChar] = useState({});\r\n\r\n    const {loading, error, getCharacter, clearError} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar()\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char)\r\n    }\r\n\r\n    function updateChar() {\r\n        clearError()\r\n\r\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\r\n    \r\n        getCharacter(id)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const spinner = loading ? <Spinner/> : null;\r\n    const content = !(loading || error) ? <View char={char}/> : null;\r\n\r\n    return (\r\n        <div className=\"randomchar\">\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n            <div className=\"randomchar__static\">\r\n                <p className=\"randomchar__title\">\r\n                    Random character for today!<br/>\r\n                    Do you want to get to know him better?\r\n                </p>\r\n                <p className=\"randomchar__title\">\r\n                    Or choose another one\r\n                </p>\r\n                <button onClick={updateChar} className=\"button button__main\">\r\n                    <div className=\"inner\">try it</div>\r\n                </button>\r\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst View = ({char}) => {\r\n    const {name, smallDescription, thumbnail, homepage, wiki} = char;\r\n    \r\n    let blankImgStyle = {};\r\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg' || 'http://i.annihil.us/u/prod/marvel/i/mg/f/60/4c002e0305708.gif') {\r\n        blankImgStyle = {'objectFit' : 'contain'};\r\n    }\r\n\r\n    return (\r\n        <div className=\"randomchar__block\">\r\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={blankImgStyle}/>\r\n            <div className=\"randomchar__info\">\r\n                <p className=\"randomchar__name\">{name}</p>\r\n                <p className=\"randomchar__descr\">\r\n                    {smallDescription}\r\n                </p>\r\n                <div className=\"randomchar__btns\">\r\n                    <a \r\n                        href={homepage} \r\n                        className=\"button button__main\" \r\n                        target=\"_blank\" \r\n                        rel=\"noreferrer\"\r\n                        >\r\n                            <div className=\"inner\">homepage</div>\r\n                    </a>\r\n                    <a \r\n                        href={wiki} \r\n                        className=\"button button__secondary\" \r\n                        target=\"_blank\" \r\n                        rel=\"noreferrer\"\r\n                        >\r\n                            <div className=\"inner\">Wiki</div>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RandomChar;","import {useState, useEffect, useRef} from 'react';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport './charList.scss';\r\n\r\nconst CharList = (props) => {\r\n    const {loading, error, getAllCharacters, _baseOffset} = useMarvelService();\r\n    \r\n    const [charList, setCharList] = useState([]);\r\n    const [newItemLoading, setNewItemLoading] = useState(false);\r\n    const [offset, setOffset] = useState();\r\n    // eslint-disable-next-line no-unused-vars\r\n    const [charListEnded, setCharListEnded] = useState(false);\r\n    const [fetching, setFetching] = useState(false);\r\n    \r\n\r\n    useEffect(() => {\r\n        if (fetching) {\r\n            onRequest(offset, true);\r\n            setFetching(false)\r\n        }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [fetching]);\r\n\r\n    useEffect(() => {\r\n        setFetching(true);\r\n    }, [])\r\n\r\n    const onRequest = (offset, initial) => {\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n        getAllCharacters(offset)\r\n            .then(onCharListLoaded);\r\n    }\r\n\r\n    const onCharListLoaded = (newCharList) => {\r\n        let ended = false;\r\n        if (newCharList.length < 9) {\r\n            ended = true;\r\n        }\r\n\r\n        setCharList(charList => [...charList, ...newCharList]);\r\n        setNewItemLoading(newItemLoading => false);\r\n        setOffset(offset => offset + 9);\r\n        setCharListEnded(charListEnded => ended);\r\n    }\r\n\r\n    const itemRefs = useRef([]);\r\n\r\n    const focusOnItem = (id) => {\r\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\r\n        itemRefs.current[id].classList.add('char__item_selected');\r\n        itemRefs.current[id].focus();\r\n    }\r\n\r\n    function renderItems(arr) {\r\n        const items =  arr.map((item, i) => {\r\n            let blankImgStyle = {};\r\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg' || 'http://i.annihil.us/u/prod/marvel/i/mg/f/60/4c002e0305708.gif') {\r\n                blankImgStyle = {'objectFit' : 'contain'};\r\n            }\r\n            \r\n            return (\r\n                <CSSTransition timeout={300} key={item.id} classNames={\"char__item\"}>\r\n                    <li \r\n                        className=\"char__item\"\r\n                        tabIndex={0}\r\n                        ref={el => itemRefs.current[i] = el}\r\n                        key={item.id}\r\n                        onClick={() => {\r\n                            props.onCharSelected(item.id);\r\n                            focusOnItem(i);\r\n                        }}>\r\n                            <img src={item.thumbnail} alt={item.name} style={blankImgStyle}/>\r\n                            <div className=\"char__name\">{item.name}</div>\r\n                    </li>\r\n                </CSSTransition>\r\n            )\r\n        });\r\n\r\n        return (\r\n            <ul className=\"char__grid\">\r\n                <TransitionGroup component={null}>\r\n                    {items}\r\n\r\n                </TransitionGroup>\r\n            </ul>\r\n        )\r\n    }\r\n    \r\n    const items = renderItems(charList);\r\n\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\r\n\r\n    return (\r\n        <div className=\"char__list\">\r\n            {errorMessage}\r\n            {spinner}\r\n            {items}\r\n            {loading && newItemLoading ? <Spinner/> : (\r\n                <button \r\n                    className=\"button button__main button__long\"\r\n                    style={{'display' : charListEnded ? 'none' : 'block'}}\r\n                    onClick={() => onRequest(offset)}>\r\n                    <div className=\"inner\">load more</div>\r\n                </button>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nCharList.propTypes = {\r\n    onCharSelected: PropTypes.func.isRequired\r\n}\r\n\r\nexport default CharList;","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <>\r\n            <p className=\"char__select\">Please select a character to see information</p>\r\n            <div className=\"skeleton\">\r\n                <div className=\"pulse skeleton__header\">\r\n                    <div className=\"pulse skeleton__circle\"></div>\r\n                    <div className=\"pulse skeleton__mini\"></div>\r\n                </div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Skeleton;","import { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom'\r\nimport PropTypes from 'prop-types';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport Skeleton from '../skeleton/Skeleton';\r\n\r\nimport './charInfo.scss';\r\n\r\nconst CharInfo = (props) => {\r\n\r\n    const [char, setChar] = useState(null);\r\n\r\n    const {loading, error, getCharacter} = useMarvelService();\r\n\r\n    useEffect(() => updateChar(), []);\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n    }, [props.charId])\r\n\r\n    const updateChar = () => {\r\n        const {charId} = props;\r\n        if (!charId) {\r\n            return;\r\n        }\r\n\r\n        getCharacter(charId)\r\n            .then(onCharLoaded)\r\n    }\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const skeleton = char || loading || error ? null : <Skeleton/>;\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const spinner = loading ? <Spinner/> : null;\r\n    const content = !(loading || error || !char) ? <View char={char}/> : null;\r\n\r\n    return (\r\n        <div className=\"char__info\">\r\n            {skeleton}\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst View = ({char}) => {\r\n    const {name, smallDescription, thumbnail, homepage, wiki, comics} = char;\r\n\r\n    let blankImgStyle = {};\r\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg' || 'http://i.annihil.us/u/prod/marvel/i/mg/f/60/4c002e0305708.gif') {\r\n        blankImgStyle = {'objectFit' : 'contain'};\r\n    }\r\n\r\n    \r\n\r\n    return (\r\n        <>\r\n            <div className=\"char__basics\">\r\n                <img src={thumbnail} alt={name} style={blankImgStyle}/>\r\n                <div>\r\n                    <div className=\"char__info-name\">{name}</div>\r\n                    <div className=\"char__btns\">\r\n                        <a \r\n                            href={homepage} \r\n                            className=\"button button__main\" \r\n                            target=\"_blank\" \r\n                            rel=\"noreferrer\"\r\n                            >\r\n                                <div className=\"inner\">homepage</div>\r\n                        </a>\r\n                        <a \r\n                            href={wiki} \r\n                            className=\"button button__secondary\" \r\n                            target=\"_blank\" \r\n                            rel=\"noreferrer\"\r\n                            >\r\n                                <div className=\"inner\">Wiki</div>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"char__descr\">\r\n                {smallDescription}\r\n            </div>\r\n            <div className=\"char__comics\">Comics:</div>\r\n            <ul className=\"char__comics-list\">\r\n                {comics.length > 0 ? null : 'There is no comics with this character'}\r\n                {\r\n                    comics.map((item, i) => {\r\n                        // eslint-disable-next-line\r\n                       if (i > 9) return;\r\n                        return (\r\n                            <li key={i} className=\"char__comics-item\">\r\n                                {item.name}\r\n                            </li>\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nCharInfo.propTypes = {\r\n    charId: PropTypes.number\r\n}\r\n\r\nexport default CharInfo;","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={loading}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n    const [selectedChar, setSelectedChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setSelectedChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"/>\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/>\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm />\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img \r\n                className=\"bg-decoration\" \r\n                src={decoration} \r\n                alt=\"vision\"\r\n            />\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MainPage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=917ed52fae4a2a9e45d5a47c67c5011b';\r\n    const _baseOffset = Math.floor(1 + Math.random() * 1500);\r\n\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`)\r\n        return res.data.results.map(_transformCharacter)\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n\t\t);\r\n\t\treturn res.data.results.map(_transformComics);\r\n\t};\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            smallDescription: char.description \r\n                ? `${char.description.slice(0, 210)}...` \r\n                : 'There is no description character',\r\n            fullDescription: char.description,\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount \r\n                ? `${comics.pageCount} pages` \r\n                : 'No information about the number of pages',\r\n            language: comics.textObjects.language || 'en-us',\r\n            price: comics.prices[0].price \r\n                ? `${comics.prices[0].price}$` \r\n                : 'not available'\r\n\r\n        }\r\n    }\r\n\r\n    return {\r\n        getCharacter, \r\n        getCharacterByName, \r\n        getAllCharacters, \r\n        loading, \r\n        error, \r\n        clearError, \r\n        getAllComics, \r\n        getComic, \r\n        _baseOffset\r\n    };\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n\r\n            return data;\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, error, request, clearError};\r\n}\r\n"],"names":["_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","char","name","smallDescription","thumbnail","homepage","wiki","blankImgStyle","_jsxs","className","children","href","target","rel","_useState","useState","_useState2","_slicedToArray","setChar","_useMarvelService","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","props","getAllCharacters","_baseOffset","charList","setCharList","_useState3","_useState4","newItemLoading","setNewItemLoading","_useState5","_useState6","offset","setOffset","_useState7","_useState8","charListEnded","setCharListEnded","_useState9","_useState10","fetching","setFetching","onRequest","initial","onCharListLoaded","newCharList","ended","length","concat","_toConsumableArray","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","TransitionGroup","component","renderItems","_Fragment","comics","charId","skeleton","Skeleton","getCharacterByName","results","Link","to","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","disabled","FormikErrorMessage","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","args","Array","_key","call","apply","state","_createClass","key","value","errorInfo","console","log","this","setState","Component","selectedChar","setSelectedChar","Helmet","RandomChar","CharList","CharInfo","CharSearchForm","decoration","_useHttp","setLoading","setError","request","useCallback","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","data","_args","wrap","_context","prev","next","undefined","fetch","sent","ok","Error","status","json","abrupt","t0","message","stop","_x","useHttp","_apiBase","_apiKey","res","_transformCharacter","_ref2","_callee2","_context2","_ref3","_callee3","_context3","_x2","getAllComics","_ref4","_callee4","_args4","_context4","_transformComics","getComic","_ref5","_callee5","_context5","_x3","description","slice","fullDescription","path","extension","urls","title","pageCount","language","textObjects","price","prices"],"sourceRoot":""}